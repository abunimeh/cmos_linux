.. _vp_intro:

初识验证平台
========================================

这是做什么的
----------------------------------------
平台组是中心2016年6月成立的一个新组，验证平台是平台组的第一款产品。

验证平台的目标是为中心的验证、设计人员搭建一套简单、自动、统一的验证环境。

为什么要用它
----------------------------------------
首先，在验证平台之前， `验证一组 <http://172.51.13.70/do/view/Main/SimCmd2>`_ 、 `验证二组 <http://172.51.13.70/do/view/Main/SimCmd>`_ 的环境在命令、路径和方法上有许多不统一的地方。

这种不统一会造成许多问题，例如重复开发、迁移与集成困难等。

为了避免这些问题，使验证、设计人员将更多的精力放在验证、设计本身上，需要一个统一的验证平台。

其次，之前的验证环境的整体设计方法可以归结为面向过程的方式，按照项目需求在核心组件上直接改动。

这种方式有很多缺点：

1. 与项目的耦合度太高，不利于验证环境的迁移与独立开发；
2. 没有将变化的部分封装，不利于验证环境的拓展与维护；
3. 对核心组件的频繁改动，不利于验证环境的稳定性。

新的平台设计方法采用的面向对象的设计方法，将整个验证环境抽象为平台，每个项目使用的验证环境可以看作是平台的实例化。

这样做的优点：

1. 将平台开发与项目开发解耦合，项目的环境需求抽象为平台需求在平台开发层面实现，平台可以任意的迁移与独立开发
2. 将验证环境与项目关联的部分封装成对用户友好的可配置文件，也是对用户开放的唯一接口文件，平台的拓展与维护只需要针对该配置文件的变化部分
3. 封装好的可配置文件是项目中唯一频繁改动的地方，配置的改变不会影响平台的稳定性

除了设计方法上的差异，之前的验证环境缺少一个集中的数据库，所有的数据都是零散在各处的文本、数据，平台会建立一个统一的集中数据库将宝贵的数据收集起来，并且会开发相匹配web前端方便大家归类查询。

总之，平台的设计宗旨是简单、自动、统一；设计原则是：可配置性、可复用性、可拓展性。

它由哪几部分组成
----------------------------------------
平台正式release之后会有如下的组成部分：

- config files

  + 配置文件
  + 只有这一部分在proj trunk中，也只有这一部分允许用户修改
  + 详细用法请参考 :ref:`config`

- runner(pj)

  + 执行cmd
  + 详细用法请参考 :ref:`runner`

- backend

  + 查看report
  + 详细用法请参考 :ref:`backend`
