### generated by Jinja2 template, used by prun
{%-for ced_key, ced_value in CED|dictsort%}
{{ced_key}} = {{ced_value}}
{%-endfor%}

### internal variables
dir_guard = @mkdir -p ${@D}
cd_guard = @cd ${@D}

### targets
.PHONY: compile_all
compile_all: \
{%-for simv in simv_dic_lst%}
{%-if loop.last%}
${SIMV_DIR}/{{simv.name}}/simv
{%-else%}
${SIMV_DIR}/{{simv.name}}/simv \
{%-endif%}
{%-endfor%}

.PHONY: analysis_dut_all
analysis_dut_all: \
{%-for simv in simv_dic_lst%}
{%-if loop.last%}
${SIMV_DIR}/{{simv.name}}/.dut_ana
{%-else%}
${SIMV_DIR}/{{simv.name}}/.dut_ana \
{%-endif%}
{%-endfor%}

.PHONY: analysis_tb_all
analysis_tb_all: \
{%-for simv in simv_dic_lst%}
{%-if loop.last%}
${SIMV_DIR}/{{simv.name}}/.tb_ana
{%-else%}
${SIMV_DIR}/{{simv.name}}/.tb_ana \
{%-endif%}
{%-endfor%}

{%for case, gs_lst in cvs_dic|dictsort%}
.PHONY: run_simv_{{case}}
run_simv_{{case}}: \
{%-for seed in gs_lst[1:]%}
{%-if loop.last%}
run_simv_{{case}}__{{seed}}
{%-else%}
run_simv_{{case}}__{{seed}} \
{%-endif%}
{%-endfor%}

.PHONY: verdi_{{case}}
verdi_{{case}}: \
{%-for seed in gs_lst[1:]%}
{%-if loop.first%}
verdi_{{case}}__{{seed}}
{%-endif%}
{%-endfor%}
{%endfor%}

### c compilation
{%-if c_lst%}
{%-for c in c_lst%}
${CLIB_DIR}/{{c}}.o: ${MODULE_C}/{{c}}.c
	${dir_guard}
	${cd_guard} && gcc {{c_opts}} -I${VCS_HOME}/include -c $<
{%-endfor%}
${CLIB_DIR}/uvm_dpi.o: ${UVM_HOME}/src/dpi/uvm_dpi.cc
	${dir_guard}
	${cd_guard} && g++ {{c_opts}} -I${VCS_HOME}/include -c $<
${CLIB_DIR}/lib${MODULE}.so: \
{%-for c in c_lst%}
${CLIB_DIR}/{{c}}.o \
{%-endfor%}
${CLIB_DIR}/uvm_dpi.o
	${dir_guard}
	${cd_guard} && gcc -shared -o $@ $^
compile_c: ${CLIB_DIR}/lib${MODULE}.so
{%-endif%}

### simv targets
{%-for simv in simv_dic_lst%}
${SIMV_DIR}/{{simv.name}}/dut.flist: \
{%-for dut_file in simv.dut_file_lst%}
{{dut_file}} \
{%-endfor%}
${SIMV_DIR}/{{simv.name}}/simv_dutfl.pcl
	${dir_guard}
{%-if not simv.dut_file_lst%}
	@echo > $@
{%-endif%}
{%-for dut_file in simv.dut_file_lst%}
{%-if loop.first%}
	@echo {{dut_file}} > $@
{%-else%}
	@echo {{dut_file}} >> $@
{%-endif%}
{%-endfor%}
{%-for dut_dir in simv.dut_dir_lst%}
	@echo {{dut_dir}} >> $@
{%-endfor%}

${SIMV_DIR}/{{simv.name}}/tb.flist: \
{%-for tb_file in simv.tb_file_lst%}
{{tb_file}} \
{%-endfor%}
{%-for tb_file in simv.tb_dep_file_lst%}
{{tb_file}} \
{%-endfor%}
${SIMV_DIR}/{{simv.name}}/simv_tbfl.pcl
	${dir_guard}
{%-if not simv.tb_file_lst%}
	@echo > $@
{%-endif%}
{%-for tb_file in simv.tb_file_lst%}
{%-if loop.first%}
	@echo {{tb_file}} > $@
{%-else%}
	@echo {{tb_file}} >> $@
{%-endif%}
{%-endfor%}
{%-for tb_dir in simv.tb_dir_lst%}
	@echo {{tb_dir}} >> $@
{%-endfor%}

${SIMV_DIR}/{{simv.name}}/.dut_ana: \
${SIMV_DIR}/{{simv.name}}/dut.flist \
${SIMV_DIR}/{{simv.name}}/simv_cfg.json \
${CMN_CONFIG}/proj.cfg
	${cd_guard} && \
	{{simv.ana_tool}} \
	{{simv.da_opts}} \
{%-if simv.ca_opts%}
	{{simv.ca_opts}} \
{%-endif%}
	-f $< \
	-l ${SIMV_DIR}/{{simv.name}}/dut_ana.log && \
	touch $@

${SIMV_DIR}/{{simv.name}}/.tb_ana: \
${SIMV_DIR}/{{simv.name}}/tb.flist \
${SIMV_DIR}/{{simv.name}}/simv_cfg.json \
${CMN_CONFIG}/proj.cfg
	${cd_guard} && \
	{{simv.ana_tool}} \
	{{simv.ta_opts}} \
{%-if simv.ca_opts%}
	{{simv.ca_opts}} \
{%-endif%}
	-f $< \
	-l ${SIMV_DIR}/{{simv.name}}/tb_ana.log && \
	touch $@

{%for file_name, file_line_lst in simv.file_dic|dictsort%}
${SIMV_DIR}/{{simv.name}}/{{file_name}}: \
${SIMV_DIR}/{{simv.name}}/simv_cfg.json \
${CMN_CONFIG}/proj.cfg
	${dir_guard}
{%-for file_line in file_line_lst%}
{%-if loop.first%}
	@echo '{{file_line}}' > $@
{%-else%}
	@echo '{{file_line}}' >> $@
{%-endif%}
{%-endfor%}
{%endfor%}

${SIMV_DIR}/{{simv.name}}/simv: \
{%-for file_name, file_cont in simv.file_dic|dictsort%}
${SIMV_DIR}/{{simv.name}}/{{file_name}} \
{%-endfor%}
{%-if c_lst%}
compile_c \
{%-endif%}
${SIMV_DIR}/{{simv.name}}/.dut_ana \
${SIMV_DIR}/{{simv.name}}/.tb_ana
	${cd_guard} && \
{%-for pre_cmd in simv.pre_cmd_lst%}
	{{pre_cmd}} && \
{%-endfor%}
	{{simv.elab_tool}} \
	{{simv.e_opts}} \
{%-if simv.ce_opts%}
	{{simv.ce_opts}} \
{%-endif%}
	-top {{simv.tb_top}} \
{%-if c_lst%}
	-LDFLAGS -L${CLIB_DIR} -l${MODULE} \
{%-endif%}
	-l ${SIMV_DIR}/{{simv.name}}/elab.log \
	-o $@
{%-for post_cmd in simv.post_cmd_lst-%}
	{{' '}}&& \
	{{post_cmd}}
{%-endfor%}

.PHONY: verdi_{{simv.name}}
verdi_{{simv.name}}: ${SIMV_DIR}/{{simv.name}}/.dut_ana
	cd ${SIMV_DIR}/{{simv.name}} && \
	verdi {{simv.w_opts}} -simflow -lib work -nologo &
{%endfor%}

### case targets
{%-for case in case_dic_lst%}
.PHONY: run_simv_{{case.name}}__{{case.seed}}
run_simv_{{case.name}}__{{case.seed}}: \
${SIMV_DIR}/{{case.simv}}/simv \
{%-for file_name, file_cont in case.file_dic|dictsort%}
${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{file_name}} \
{%-endfor%}
${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{case.name}}.tcl
{%-if c_lst%}
	export LD_LIBRARY_PATH=${CLIB_DIR}:${LD_LIBRARY_PATH} && \
{%-endif%}
{%-for pre_cmd in case.pre_cmd_lst%}
	{{pre_cmd}} && \
{%-endfor%}
	mkdir -p ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}} && \
	cd ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}} && \
	$< \
	+TEMPDIR=${MODULE_OUTPUT}/{{case.name}}/{{case.seed}} \
	{{case.su_opts}} \
	-l ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{case.seed}}.log \
	-ucli -i ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{case.name}}.tcl
{%-for post_cmd in case.post_cmd_lst-%}
	{{' '}}&& \
	{{post_cmd}}
{%-endfor%}

.PHONY: ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{case.name}}.tcl
${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{case.name}}.tcl:
	${dir_guard}
	@echo > $@
{%-if case.wave%}
{%-if case.wave_format == 'fsdb'%}
	@echo fsdbDumpfile {{case.name}}__{{case.seed}}.fsdb >> $@
	@echo fsdbDumpvars 0 {{case.tb_top}} >> $@
{%-if case.wave_mem%}
	@echo fsdbDumpMDA
{%-endif%}
{%-if case.wave_glitch%}
	@echo fsdbDumpon +glitch
{%-endif%}
{%-endif%}
{%-endif%}
	@echo run >> $@

{%for file_name, file_line_lst in case.file_dic|dictsort%}
.PHONY: ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{file_name}}
${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{file_name}}:
	${dir_guard}
{%-for file_line in file_line_lst%}
{%-if loop.first%}
	@echo '{{file_line}}' > $@
{%-else%}
	@echo '{{file_line}}' >> $@
{%-endif%}
{%-endfor%}
{%endfor%}

.PHONY: verdi_{{case.name}}__{{case.seed}}
verdi_{{case.name}}__{{case.seed}}: ${SIMV_DIR}/{{case.simv}}/simv
	mkdir -p ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}} && \
	cd ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}} && \
	verdi {{case.w_opts}} -simflow -simBin $< \
	-ssf ${MODULE_OUTPUT}/{{case.name}}/{{case.seed}}/{{case.name}}__{{case.seed}}.fsdb \
	-nologo &
{%endfor%}
