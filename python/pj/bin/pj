#! /usr/bin/env python3
"""
Author: Guanyu Yi @ CPU Verification Platform Group
Email: yigy@cpu.com.cn
Description: verification platform main entrence
"""

import os
import argparse
import pcom
import im_runner
import init_runner
import sr_runner
import cov_runner
import vplan_runner
import reg_runner
import doc_runner
import clean_runner
import gen_runner
import leda_runner
import ac_runner
import dc_runner
import tm_runner
import fm_runner
import icc_runner
import cdc_runner

LOG = pcom.gen_logger(__name__)

def gen_im_parser(subparsers):
    """to generate im parser"""
    im_parser = subparsers.add_parser(
        "im",
        help="sub cmd about running pj instance messager")
    im_parser.set_defaults(func=main_im)

def main_im(args):
    """im sub cmd top function"""
    im_runner.run_im(args)

def gen_init_parser(subparsers):
    """to generate init parser"""
    init_parser = subparsers.add_parser(
        "init",
        help="sub cmd about generating initial svn directories")
    init_parser.add_argument(
        "-proj", dest="proj_name", default=False,
        help="input the proj name which will be check out from repository")
    init_parser.add_argument(
        "-dir", dest="sub_dir", default=[], nargs="+",
        help="input the directory name from repository")
    init_parser.set_defaults(func=main_init)

def main_init(args):
    """init sub cmd top function"""
    init_runner.run_init(args)

def gen_run_parser(subparsers):
    """to generate run parser"""
    run_parser = subparsers.add_parser(
        "run",
        help="sub cmd about running simulation and regression")
    run_parser.add_argument(
        "-m", dest="run_module", default="",
        help="input run module")
    run_parser.add_argument(
        "-comp", dest="run_comp", default=False, action="store_true",
        help="toggle to elaborate all case simvs")
    run_parser.add_argument(
        "-clib", dest="run_clib", default=False, action="store_true",
        help="toggle to compile c lib for simulation")
    run_parser.add_argument(
        "-csrc", dest="run_csrc", default=False, action="store_true",
        help="toggle to run c src built exec file for module")
    run_parser.add_argument(
        "-list", dest="run_list", default=False, action="store_true",
        help="toggle to list all cases in module")
    run_parser.add_argument(
        "-all", dest="run_all", default=False, action="store_true",
        help="toggle to run all cases of module")
    run_parser.add_argument(
        "-c", dest="run_case_lst", default=[], nargs="+",
        help="input simulation case")
    run_parser.add_argument(
        "-t", dest="regr_type_lst", default=[], nargs="+",
        help="input regression type")
    run_parser.add_argument(
        "-seed", dest="run_seed", default="",
        help="input run case seed")
    run_parser.add_argument(
        "-wave", dest="run_wave", default=None, nargs="*", choices=["mem", "glitch"],
        help="toggle to dump simulation waveform")
    run_parser.add_argument(
        "-verdi", dest="run_verdi", default=False, action="store_true",
        help="toggle to kick off verdi to open simulation waveform")
    run_parser.add_argument(
        "-gui", dest="run_gui", default=False, action="store_true",
        help="toggle to kick off GUI during simulation")
    run_parser.add_argument(
        "-rt", dest="run_rt", default="",
        help="input run random times")
    run_parser.add_argument(
        "-cov", dest="run_cov", default=False, action="store_true",
        help="toggle to collect coverage in running")
    run_parser.add_argument(
        "-upf", dest="run_upf", default=False, action="store_true",
        help="toggle to run low power simulation with upf")
    run_parser.add_argument(
        "-prof", dest="run_prof", default=[], nargs="+", choices=["time", "mem"],
        help="input type to do simulation profiling")
    run_parser.add_argument(
        "-fpga", dest="run_fpga", default=False, action="store_true",
        help="toggle to dump data for FPGA")
    run_parser.add_argument(
        "-CLIBC", dest="run_lib_comp_opts", default="",
        help="input custom C lib compilation options for simulation")
    run_parser.add_argument(
        "-CSRCC", dest="run_src_comp_opts", default="",
        help="input custom C src compilation options for building exec file")
    run_parser.add_argument(
        "-CSRCR", dest="run_src_run_opts", default="",
        help="input custom C src runtime options for exec file")
    run_parser.add_argument(
        "-DA", dest="run_dut_ana_opts", default="",
        help="input DUT analysis options")
    run_parser.add_argument(
        "-TA", dest="run_tb_ana_opts", default="",
        help="input TB analysis options")
    run_parser.add_argument(
        "-E", dest="run_elab_opts", default="",
        help="input elaboration options")
    run_parser.add_argument(
        "-S", dest="run_simu_opts", default="",
        help="input simulation options")
    run_parser.add_argument(
        "-fresh", dest="run_fresh", default=False, action="store_true",
        help="toggle to compilation from fresh")
    run_parser.add_argument(
        "-fm", dest="run_failed_mode", default=False, action="store_true",
        help="toggle to run in failed mode")
    run_parser.add_argument(
        "-x86_ins", dest="run_x86_ins", default=False, action="store_true",
        help="toggle to perform x86 instruction generation before")
    run_parser.add_argument(
        "-x86_ins_num", dest="run_x86_ins_num", type=int, default=None,
        help="input x86 instruction generation number")
    run_parser.add_argument(
        "-x86_ins_groups", dest="run_x86_ins_groups", default=None, nargs="+",
        help="input x86 instruction generation groups")
    run_parser.set_defaults(func=main_run)

def main_run(args):
    """run sub cmd top function"""
    sr_runner.run_sr(args)

def gen_cov_parser(subparsers):
    """to generate cov parser"""
    cov_parser = subparsers.add_parser(
        "cov",
        help="sub cmd about merging and analyzing coverage")
    cov_parser.add_argument(
        "-m", dest="cov_module", default="",
        help="input coverage merge modules")
    cov_parser.add_argument(
        "-merge", dest="cov_merge", default=False, action="store_true",
        help="toggle to merge coverage together")
    cov_parser.add_argument(
        "-rpt", dest="cov_rpt", default=False, action="store_true",
        help="toggle to generate coverage report")
    cov_parser.add_argument(
        "-verdi", dest="cov_verdi", default=False, action="store_true",
        help="toggle to kick off verdi to analyze coverage")
    cov_parser.set_defaults(func=main_cov)

def main_cov(args):
    """cov sub cmd top function"""
    cov_runner.run_cov(args)

def gen_vplan_parser(subparsers):
    """to generate vplan parser"""
    vplan_parser = subparsers.add_parser(
        "vplan",
        help="sub cmd about processing vplan")
    vplan_parser.add_argument(
        "-m", dest="vplan_module", default="",
        help="input vplan module")
    vplan_parser.add_argument(
        "-proc", dest="vplan_proc", default=False, action="store_true",
        help="toggle to generating or annotating vplan according to cfg files")
    vplan_parser.add_argument(
        "-d", dest="vplan_days", type=int, default=1,
        help="input vplan case passing rate query dates")
    vplan_parser.set_defaults(func=main_vplan)

def main_vplan(args):
    """vplan sub cmd top function"""
    vplan_runner.run_vplan(args)

def gen_reg_parser(subparsers):
    """to generate reg parser"""
    reg_parser = subparsers.add_parser(
        "reg",
        help="sub cmd about generating auto reg")
    reg_parser.add_argument(
        "-m", dest="reg_module", default="",
        help="input reg module")
    reg_parser.add_argument(
        "-gen", dest="reg_gen", default=False, action="store_true",
        help="toggle to generate auto reg files")
    reg_parser.set_defaults(func=main_reg)

def main_reg(args):
    """reg sub cmd top function"""
    reg_runner.run_reg(args)

def gen_doc_parser(subparsers):
    """to generate doc parser"""
    doc_parser = subparsers.add_parser(
        "doc",
        help="sub cmd about generating natural docs")
    doc_parser.add_argument(
        "-m", dest="doc_module", default="",
        help="input doc module")
    doc_parser.add_argument(
        "-p", dest="doc_path", default="",
        help="input doc path")
    doc_parser.add_argument(
        "-gen", dest="doc_gen", default=False, action="store_true",
        help="toggle to generate natural docs")
    doc_parser.set_defaults(func=main_doc)

def main_doc(args):
    """doc sub cmd top function"""
    doc_runner.run_doc(args)

def gen_clean_parser(subparsers):
    """to generate clean parser"""
    clean_parser = subparsers.add_parser(
        "clean",
        help="sub cmd about cleaning output")
    clean_parser.add_argument(
        "-m", dest="clean_module", default="",
        help="input clean module")
    clean_parser.add_argument(
        "-c", dest="clean_case_lst", default=[], nargs="+",
        help="input clean case output")
    clean_parser.add_argument(
        "-case", dest="clean_case", default=False, action="store_true",
        help="toggle to clean module output all case dir")
    clean_parser.add_argument(
        "-cov", dest="clean_cov", default=False, action="store_true",
        help="toggle to clean module output coverage dir")
    clean_parser.add_argument(
        "-output", dest="clean_output", default=False, action="store_true",
        help="toggle to clean module output dir")
    clean_parser.add_argument(
        "-tb", dest="clean_tb", default=False, action="store_true",
        help="toggle to clean and REVERT module tb dir (CAUTION!!!)")
    clean_parser.add_argument(
        "-config", dest="clean_config", default=False, action="store_true",
        help="toggle to clean and REVERT module config dir (CAUTION!!!)")
    clean_parser.set_defaults(func=main_clean)

def main_clean(args):
    """clean sub cmd top function"""
    clean_runner.run_clean(args)

def gen_gen_parser(subparsers):
    """to generate gen parser"""
    gen_parser = subparsers.add_parser(
        "gen",
        help="sub cmd about generating environments")
    gen_parser.add_argument(
        "-m", dest="gen_module", default="",
        help="input gen module")
    gen_parser.add_argument(
        "-d", dest="gen_module_dir", default="",
        help="input gen module dir")
    gen_parser.set_defaults(func=main_gen)

def main_gen(args):
    """gen sub cmd top function"""
    gen_runner.run_gen(args)

def gen_leda_parser(subparsers):
    """to generate leda parser"""
    leda_parser = subparsers.add_parser(
        "leda",
        help="sub cmd about leda flow")
    leda_gg_group = leda_parser.add_mutually_exclusive_group()
    leda_gg_group.add_argument(
        "-gen_log", dest="leda_gen_log", default=False, action="store_true",
        help="toggle to generate leda logs")
    leda_parser.add_argument(
        "-f", dest="leda_flist_lst", default=[], nargs="+",
        help="input base rtl flist files")
    leda_parser.add_argument(
        "-t", dest="leda_top", default="",
        help="input base rtl top module")
    leda_parser.add_argument(
        "-bbf", dest="leda_bb_flist_lst", default=[], nargs="+",
        help="input black box flist files")
    leda_parser.add_argument(
        "-c", dest="leda_cfg_file", default="",
        help="input leda cfg file")
    leda_parser.add_argument(
        "-w", dest="leda_waiver_flist", default=[], nargs="+",
        help="input leda_waiver files")
    leda_gg_group.add_argument(
        "-gui", dest="leda_gui", default=False, action="store_true",
        help="toggle to kick off leda gui")
    leda_parser.set_defaults(func=main_leda)

def main_leda(args):
    """leda sub cmd top function"""
    leda_runner.run_leda(args)

def gen_ac_parser(subparsers):
    """to generate ac parser"""
    ac_parser = subparsers.add_parser(
        "ac",
        help="sub cmd about auto connect flow")
    ac_parser.add_argument(
        "-d", dest="ac_dir", default=os.getcwd(),
        help="input directory to generate auto connected verilog files")
    ac_parser.set_defaults(func=main_ac)

def main_ac(args):
    """ac sub cmd top function"""
    ac_runner.run_ac(args)

def gen_dc_parser(subparsers):
    """to generate dc parser"""
    dc_parser = subparsers.add_parser(
        "dc",
        help="sub cmd about run dc")
    dc_parser.add_argument(
        "-gen_tcl", dest="dc_gen_tcl", default=False, action="store_true",
        help="toggle to generate dc tcl files")
    dc_parser.add_argument(
        "-d", dest="dc_dir", default="",
        help="input existed dc directory")
    dc_parser.add_argument(
        "-run", dest="dc_run", default=False, action="store_true",
        help="toggle to run dc")
    dc_parser.add_argument(
        "-topo", dest="dc_topo", default=False, action="store_true",
        help="toggle to run dc in topographical mode")
    dc_parser.add_argument(
        "-s", dest="dc_src", default="",
        help="input dc source files directory")
    dc_parser.add_argument(
        "-tm", dest="dc_tm_flg", default=False, action="store_true",
        help="toggle to parse dc timing report automatically")
    dc_parser.add_argument(
        "-l", dest="dc_tm_level", type=int, default=1,
        help="input the statistics level to parse dc timing report")
    dc_parser.add_argument(
        "-fm", dest="dc_formality", default=False, action="store_true",
        help="toggle to run formality automatically")
    dc_parser.set_defaults(func=main_dc)

def main_dc(args):
    """dc sub cmd top function"""
    dc_runner.run_dc(args)

def gen_tm_parser(subparsers):
    """to generate tm parser"""
    tm_parser = subparsers.add_parser(
        "tm",
        help="sub cmd about parsing the timing report")
    tm_parser.add_argument(
        "-f", dest="tm_report_file", default=False,
        help="input timing report file")
    tm_parser.add_argument(
        "-l", dest="tm_hier_level", type=int, default=1,
        help="input the statistics hierarchy level")
    tm_parser.set_defaults(func=main_tm)

def main_tm(args):
    """tm sub cmd top function"""
    tm_runner.run_tm(args)

def gen_fm_parser(subparsers):
    """to generate fm parser"""
    fm_parser = subparsers.add_parser(
        "fm",
        help="sub cmd about run formality")
    fm_parser.add_argument(
        "-ref", dest="fm_ref_file", default=False,
        help="input formality ref file")
    fm_parser.add_argument(
        "-imp", dest="fm_imp_file", default=False,
        help="input formality imp file")
    fm_parser.add_argument(
        "-s", dest="fm_src", default="",
        help="input formality source files directory")
    fm_parser.set_defaults(func=main_fm)

def main_fm(args):
    """fm sub cmd top function"""
    fm_runner.run_fm(args)

def gen_icc_parser(subparsers):
    """to generate icc parser"""
    icc_parser = subparsers.add_parser(
        "icc",
        help="sub cmd about run icc")
    icc_parser.add_argument(
        "-stage", dest="icc_stage", default=[], nargs="+",
        help="input run icc stage")
    icc_parser.add_argument(
        "-s_stage", dest="icc_start_stage", default="",
        help="input run icc start stage")
    icc_parser.add_argument(
        "-s", dest="icc_src", default="",
        help="input icc source files directory")
    icc_parser.add_argument(
        "-d", dest="icc_time_dir", default="",
        help="input existed icc directory")
    icc_parser.set_defaults(func=main_icc)

def main_icc(args):
    """icc sub cmd top function"""
    icc_runner.run_icc(args)

def gen_cdc_parser(subparsers):
    """to generate cdc parser"""
    cdc_parser = subparsers.add_parser(
        "cdc",
        help="sub cmd about run cdc")
    cdc_parser.add_argument(
        "-s", dest="cdc_src", default="",
        help="input cdc source files directory")
    cdc_parser.set_defaults(func=main_cdc)

def main_cdc(args):
    """cdc sub cmd top function"""
    cdc_runner.run_cdc(args)

def gen_args_top():
    """to generate top args help for pj"""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    gen_im_parser(subparsers)
    gen_init_parser(subparsers)
    gen_run_parser(subparsers)
    gen_cov_parser(subparsers)
    gen_vplan_parser(subparsers)
    gen_reg_parser(subparsers)
    gen_doc_parser(subparsers)
    gen_clean_parser(subparsers)
    gen_gen_parser(subparsers)
    gen_leda_parser(subparsers)
    gen_ac_parser(subparsers)
    gen_dc_parser(subparsers)
    gen_tm_parser(subparsers)
    gen_fm_parser(subparsers)
    gen_icc_parser(subparsers)
    gen_cdc_parser(subparsers)
    return parser.parse_args()

def main():
    """pj top function"""
    args = gen_args_top()
    LOG.info("commence...")
    args.func(args)
    LOG.info("complete")

if __name__ == "__main__":
    main()
